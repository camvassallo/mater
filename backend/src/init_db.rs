use log::info;
use scylla::SessionBuilder;

pub async fn init_db() -> Result<(), scylla::transport::errors::NewSessionError> {

    // Connect to ScyllaDB
    let session = SessionBuilder::new()
        .known_node("127.0.0.1:9042") // or your Docker IP
        .build()
        .await?;

    // Create keyspace
    session
        .query(
            "CREATE KEYSPACE IF NOT EXISTS stats WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': 1 };",
            &[],
        )
        .await?;

    session
        .query(
            "CREATE TABLE IF NOT EXISTS stats.player_stats (
                player_name text,
                team text,
                conf text,
                gp int,
                min_per double,
                o_rtg double,
                usg double,
                e_fg double,
                ts_per double,
                orb_per double,
                drb_per double,
                ast_per double,
                to_per double,
                ftm int,
                fta int,
                ft_per double,
                two_pm int,
                two_pa int,
                two_p_per double,
                tpm int,
                tpa int,
                tp_per double,
                blk_per double,
                stl_per double,
                ftr double,
                yr text,
                ht text,
                num text,
                porpag double,
                adjoe double,
                pfr double,
                year int,
                pid int,
                player_type text,
                rec_rank double,
                ast_tov double,
                rim_made double,
                rim_attempted double,
                mid_made double,
                mid_attempted double,
                rim_pct double,
                mid_pct double,
                dunks_made double,
                dunks_attempted double,
                dunk_pct double,
                pick double,
                drtg double,
                adrtg double,
                dporpag double,
                stops double,
                bpm double,
                obpm double,
                dbpm double,
                gbpm double,
                mp double,
                ogbpm double,
                dgbpm double,
                oreb double,
                dreb double,
                treb double,
                ast double,
                stl double,
                blk double,
                pts double,
                PRIMARY KEY ((team, year), player_name)
            );",
            &[],
        )
        .await?;

    session
        .query(
            "CREATE TABLE IF NOT EXISTS stats.team_stats (
            rank int,
            team text,
            conf text,
            record text,
            adjoe double,
            adjoe_rank int,
            adjde double,
            adjde_rank int,
            barthag double,
            barthag_rank int,
            proj_wins int,
            proj_losses int,
            proj_conf_wins int,
            proj_conf_losses int,
            conf_record text,
            sos double,
            nconf_sos double,
            conf_sos double,
            proj_sos double,
            proj_nconf_sos double,
            proj_conf_sos double,
            elite_sos double,
            elite_ncsos double,
            opp_adjoe double,
            opp_adjde double,
            opp_proj_adjoe double,
            opp_proj_adjde double,
            conf_adjoe double,
            conf_adjde double,
            qual_adjoe double,
            qual_adjde double,
            qual_barthag double,
            qual_games int,
            fun double,
            conf_pf float,
            conf_pa float,
            conf_poss double,
            conf_adj_o double,
            conf_adj_d double,
            conf_sos_remain double,
            conf_win_perc double,
            wab double,
            wab_rank int,
            fun_rank int,
            adj_tempo double,
            PRIMARY KEY ((team), rank)
        );",
            &[],
        )
        .await?;

    session
        .query(
            "CREATE TABLE IF NOT EXISTS stats.game_stats (
                numdate text,
                datetext text,
                opstyle int,
                quality int,
                win1 int,
                opponent text,
                muid text,
                win2 int,
                min_per double,
                o_rtg double,
                usage double,
                e_fg double,
                ts_per double,
                orb_per double,
                drb_per double,
                ast_per double,
                to_per double,
                dunks_made int,
                dunks_att int,
                rim_made int,
                rim_att int,
                mid_made int,
                mid_att int,
                two_pm int,
                two_pa int,
                tpm int,
                tpa int,
                ftm int,
                fta int,
                bpm_rd double,
                obpm double,
                dbpm double,
                bpm_net double,
                pts double,
                orb double,
                drb double,
                ast double,
                tov double,
                stl double,
                blk double,
                stl_per double,
                blk_per double,
                pf double,
                possessions double,
                bpm double,
                sbpm double,
                loc text,
                tt text,
                pp text,
                inches int,
                cls text,
                pid int,
                year int,
                PRIMARY KEY ((pid, year, tt), numdate)
            );",
            &[],
        )
        .await?;

    // Create table for player season average stats
    session
        .query(
            "CREATE TABLE IF NOT EXISTS stats.player_season_avg_stats (
                pid int,
                year int,
                team text,
                player_name text,
                games_played int,
                avg_min_per double,
                avg_o_rtg double,
                avg_usg double,
                avg_e_fg double,
                avg_ts_per double,
                avg_orb_per double,
                avg_drb_per double,
                avg_ast_per double,
                avg_to_per double,
                avg_dunks_made double,
                avg_dunks_att double,
                avg_rim_made double,
                avg_rim_att double,
                avg_mid_made double,
                avg_mid_att double,
                avg_two_pm double,
                avg_two_pa double,
                avg_tpm double,
                avg_tpa double,
                avg_ftm double,
                avg_fta double,
                avg_bpm_rd double,
                avg_obpm double,
                avg_dbpm double,
                avg_bpm_net double,
                avg_pts double,
                avg_orb double,
                avg_drb double,
                avg_ast double,
                avg_tov double,
                avg_stl double,
                avg_blk double,
                avg_stl_per double,
                avg_blk_per double,
                avg_pf double,
                avg_possessions double,
                avg_bpm double,
                avg_sbpm double,
                avg_inches double,
                avg_opstyle double,
                avg_quality double,
                avg_win1 double,
                avg_win2 double,
                PRIMARY KEY ((pid, year), team)
            );",
            &[],
        )
        .await?;

    // Create table for player season percentiles
    session
        .query(
            "CREATE TABLE IF NOT EXISTS stats.player_season_percentiles (
                pid int,
                year int,
                team text,
                player_name text,
                pct_min_per double,
                pct_o_rtg double,
                pct_usg double,
                pct_e_fg double,
                pct_ts_per double,
                pct_orb_per double,
                pct_drb_per double,
                pct_ast_per double,
                pct_to_per double,
                pct_dunks_made double,
                pct_dunks_att double,
                pct_rim_made double,
                pct_rim_att double,
                pct_mid_made double,
                pct_mid_att double,
                pct_two_pm double,
                pct_two_pa double,
                pct_tpm double,
                pct_tpa double,
                pct_ftm double,
                pct_fta double,
                pct_bpm_rd double,
                pct_obpm double,
                pct_dbpm double,
                pct_bpm_net double,
                pct_pts double,
                pct_orb double,
                pct_drb double,
                pct_ast double,
                pct_tov double,
                pct_stl double,
                pct_blk double,
                pct_stl_per double,
                pct_blk_per double,
                pct_pf double,
                pct_possessions double,
                pct_bpm double,
                pct_sbpm double,
                pct_inches double,
                pct_opstyle double,
                pct_quality double,
                pct_win1 double,
                pct_win2 double,
                PRIMARY KEY ((pid, year), team)
            );",
            &[],
        )
        .await?;

    info!("âœ… Keyspaces and tables are ready.");
    Ok(())
}
